diff --git a/include/mruby.h b/include/mruby.h
index 7deb3cbe..d0faebd6 100644
--- a/include/mruby.h
+++ b/include/mruby.h
@@ -38,6 +38,11 @@
 #include <stdint.h>
 #include <stddef.h>
 #include <limits.h>
+#include <float.h>
+
+#ifndef DBL_EPSILON
+#define DBL_EPSILON 1e-6
+#endif
 
 #ifdef __cplusplus
 #ifndef SIZE_MAX
diff --git a/src/backtrace.c b/src/backtrace.c
index 991a67d0..90690fde 100644
--- a/src/backtrace.c
+++ b/src/backtrace.c
@@ -72,24 +72,25 @@ each_backtrace(mrb_state *mrb, ptrdiff_t ciidx, mrb_code *pc0, each_backtrace_fu
 }
 
 #ifndef MRB_DISABLE_STDIO
+char superhack[1024*20];
 
 static void
 print_backtrace(mrb_state *mrb, mrb_value backtrace)
 {
   int i;
   mrb_int n;
-  FILE *stream = stderr;
+  char stream[1000];
 
   n = RARRAY_LEN(backtrace) - 1;
   if (n == 0) return;
 
-  fprintf(stream, "trace (most recent call last):\n");
+  sprintf(stream, "trace (most recent call last):\n");
+  strcat(superhack, stream);
   for (i=0; i<n; i++) {
     mrb_value entry = RARRAY_PTR(backtrace)[n-i-1];
 
-    if (mrb_string_p(entry)) {
-      fprintf(stream, "\t[%d] %.*s\n", i, (int)RSTRING_LEN(entry), RSTRING_PTR(entry));
-    }
+    sprintf(stream, "\t[%d] %.*s\n", i, (int)RSTRING_LEN(entry), RSTRING_PTR(entry));
+    strcat(superhack, stream);
   }
 }
 
@@ -110,29 +111,31 @@ packed_bt_len(const struct backtrace_location *bt, int n)
 static void
 print_packed_backtrace(mrb_state *mrb, mrb_value packed)
 {
-  FILE *stream = stderr;
+  char stream[1000];
   const struct backtrace_location *bt;
   int n, i;
-  int ai = mrb_gc_arena_save(mrb);
 
   bt = (struct backtrace_location*)mrb_data_check_get_ptr(mrb, packed, &bt_type);
   if (bt == NULL) return;
   n = (mrb_int)RDATA(packed)->flags;
 
   if (packed_bt_len(bt, n) == 0) return;
-  fprintf(stream, "trace (most recent call last):\n");
+  strcat(superhack, "trace:\n");
+  sprintf(stream, "trace (most recent call last):\n");
+  strcat(superhack, stream);
   for (i = 0; i<n; i++) {
     const struct backtrace_location *entry = &bt[n-i-1];
     if (entry->filename == NULL) continue;
-    fprintf(stream, "\t[%d] %s:%d", i, entry->filename, entry->lineno);
+    sprintf(stream, "\t[%d] %s:%d", i, entry->filename, entry->lineno);
     if (entry->method_id != 0) {
       const char *method_name;
 
       method_name = mrb_sym2name(mrb, entry->method_id);
-      fprintf(stream, ":in %s", method_name);
-      mrb_gc_arena_restore(mrb, ai);
+      sprintf(stream, ":in %s", method_name);
+	  strcat(superhack, stream);
     }
-    fprintf(stream, "\n");
+    sprintf(stream, "\n");
+	strcat(superhack, stream);
   }
 }
 
@@ -215,13 +218,10 @@ mrb_keep_backtrace(mrb_state *mrb, mrb_value exc)
 {
   mrb_sym sym = mrb_intern_lit(mrb, "backtrace");
   mrb_value backtrace;
-  int ai;
 
   if (mrb_iv_defined(mrb, exc, sym)) return;
-  ai = mrb_gc_arena_save(mrb);
   backtrace = packed_backtrace(mrb);
   mrb_iv_set(mrb, exc, sym, backtrace);
-  mrb_gc_arena_restore(mrb, ai);
 }
 
 mrb_value
@@ -229,7 +229,6 @@ mrb_unpack_backtrace(mrb_state *mrb, mrb_value backtrace)
 {
   const struct backtrace_location *bt;
   mrb_int n, i;
-  int ai;
 
   if (mrb_nil_p(backtrace)) {
   empty_backtrace:
@@ -240,7 +239,6 @@ mrb_unpack_backtrace(mrb_state *mrb, mrb_value backtrace)
   if (bt == NULL) goto empty_backtrace;
   n = (mrb_int)RDATA(backtrace)->flags;
   backtrace = mrb_ary_new_capa(mrb, n);
-  ai = mrb_gc_arena_save(mrb);
   for (i = 0; i < n; i++) {
     const struct backtrace_location *entry = &bt[i];
     mrb_value btline;
@@ -254,7 +252,6 @@ mrb_unpack_backtrace(mrb_state *mrb, mrb_value backtrace)
       mrb_str_cat_cstr(mrb, btline, mrb_sym2name(mrb, entry->method_id));
     }
     mrb_ary_push(mrb, backtrace, btline);
-    mrb_gc_arena_restore(mrb, ai);
   }
 
   return backtrace;
diff --git a/src/fmt_fp.c b/src/fmt_fp.c
index 1f1af676..d48a7ba1 100644
--- a/src/fmt_fp.c
+++ b/src/fmt_fp.c
@@ -35,6 +35,10 @@ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include <float.h>
 #include <ctype.h>
 
+#ifndef LDBL_EPSILON
+#define LDBL_EPSILON 1e-6
+#endif
+
 #include <mruby.h>
 #include <mruby/string.h>
 
